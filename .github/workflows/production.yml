name: Deploy Production

'on':
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    environment: production
    runs-on: ubuntu-latest

    outputs:
      slack-message-id: ${{ steps.slack-initial.outputs.ts }}

    steps:
      - name: üîÄ Checkout
        uses: actions/checkout@v2

      - name: üí¨ Initial Slack Message
        id: slack-initial
        uses: ./.github/actions/slack/notification-initial
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN}}
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID}}
          deploy-url: ${{ vars.DEPLOY_URL }}
          context-status: 'Starting: Test'

      - uses: actions/setup-node@v3
        with:
          node-version-file: 'package.json'

      - name: üî† Yarn FontAwesome Setup
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}
        run: |
          yarn config set initScope npmScopes
          yarn config set npmScopes.fortawesome.npmRegistryServer "https://npm.fontawesome.com"
          yarn config set npmScopes.fortawesome.npmAlwaysAuth true
          yarn config set npmScopes.fortawesome.npmAuthToken $FONTAWESOME_NPM_AUTH_TOKEN

      - name: üê±‚Äçüèç Install Yarn
        uses: ./.github/actions/yarn/install
        with:
          cwd: '.'
          enable-corepack: false
          cache-node-modules: true
          cache-install-state: true

      - name: ü¶ã Prettier Check
        shell: bash
        run: |
          yarn format:ci

      - name: üìö ESLint Check
        shell: bash
        run: |
          yarn lint

      - name: üí¨ Update Slack Message
        uses: ./.github/actions/slack/notification-update
        with:
          initial-message: ${{ steps.slack-initial.outputs.ts }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN}}
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID}}
          deploy-url: ${{ vars.DEPLOY_URL }}
          context-status: 'Preparing: Build Astro'

      - name: üí¨ Failure Slack Message
        if: failure()
        uses: ./.github/actions/slack/notification-failed
        with:
          initial-message: ${{ steps.slack-initial.outputs.ts }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN}}
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID}}
          deploy-url: ${{ vars.DEPLOY_URL }}
          context-status: 'Failed: Test'

  build:
    name: Build Astro
    environment: production
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: üîÄ Checkout
        uses: actions/checkout@v2

      - name: üí¨ Update Slack Message
        uses: ./.github/actions/slack/notification-update
        with:
          initial-message: ${{ needs.test.outputs.slack-message-id }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN}}
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID}}
          deploy-url: ${{ vars.DEPLOY_URL }}
          context-status: 'Starting: Build Astro'

      - uses: actions/setup-node@v3
        with:
          node-version-file: 'package.json'

      - name: üî† Yarn FontAwesome Setup
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}
        run: |
          yarn config set initScope npmScopes
          yarn config set npmScopes.fortawesome.npmRegistryServer "https://npm.fontawesome.com"
          yarn config set npmScopes.fortawesome.npmAlwaysAuth true
          yarn config set npmScopes.fortawesome.npmAuthToken $FONTAWESOME_NPM_AUTH_TOKEN

      - name: üê±‚Äçüèç Install Yarn
        uses: ./.github/actions/yarn/install
        with:
          cwd: '.'
          enable-corepack: false
          cache-node-modules: true
          cache-install-state: true

      - name: üóÉÔ∏è Create .env file for frontend
        uses: SpicyPizza/create-envfile@v2.0.2
        with:
          envkey_SANITY_STUDIO_PROJECT_ID: ${{ secrets.SANITY_STUDIO_PROJECT_ID }}
          envkey_SANITY_STUDIO_DATASET: ${{ secrets.SANITY_STUDIO_DATASET }}
          envkey_ASTRO_WEBSITE_URL: ${{ vars.DEPLOY_URL }}
          file_name: .env

      - name: üó≥Ô∏è Run Env Variables Check
        shell: bash
        run: |
          yarn env:check

      - name: ‚öôÔ∏è Build
        shell: bash
        run: |
          yarn build

      - name: üì• Tar Build
        shell: bash
        run: |
          tar -cvzf dist.tar.gz dist .env

      - name: üì¶ Store Build
        uses: actions/upload-artifact@v3.1.3
        with:
          name: main-deployment-build
          path: dist.tar.gz
          retention-days: 1

      - name: üí¨ Update Slack Message
        uses: ./.github/actions/slack/notification-update
        with:
          initial-message: ${{ needs.test.outputs.slack-message-id }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN}}
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID}}
          deploy-url: ${{ vars.DEPLOY_URL }}
          context-status: 'Preparing: Deploy To Hosting'

      - name: üí¨ Failure Slack Message
        if: failure()
        uses: ./.github/actions/slack/notification-failed
        with:
          initial-message: ${{ needs.test.outputs.slack-message-id }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN}}
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID}}
          deploy-url: ${{ vars.DEPLOY_URL }}
          context-status: 'Failed: Build Astro'

  deploy:
    name: Deploy to hosting
    environment: production
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - name: üîÄ Checkout
        uses: actions/checkout@v3

      - name: ‚ôªÔ∏è Restore Build from previous job
        uses: actions/download-artifact@v3.0.2
        with:
          name: main-deployment-build
          path: dist.tar.gz

      - name: üì§ Untar Build
        shell: bash
        run: |
          tar -xvzf dist.tar.gz/dist.tar.gz -C ./
          rm -rf dist.tar.gz

      - name: üìÄ Deploy to LionDev Cloud
        id: deploy-to-plesk
        uses: ./.github/actions/deploy/deploy-to-plesk
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          passphrase: ${{ secrets.DEPLOY_SSH_PASSPHRASE }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
          source: 'dist/**,.env'
          deploy-path: ${{ vars.DEPLOY_PATH }}

      - name: üí¨ Update Slack Message
        uses: ./.github/actions/slack/notification-success
        with:
          initial-message: ${{ needs.test.outputs.slack-message-id }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN}}
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID}}
          deploy-url: ${{ vars.DEPLOY_URL }}
          context-status: 'Success: Deploy to hosting'

      - name: üí¨ Failure Slack Message
        if: failure()
        uses: ./.github/actions/slack/notification-failed
        with:
          initial-message: ${{ needs.test.outputs.slack-message-id }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN}}
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID}}
          deploy-url: ${{ vars.DEPLOY_URL }}
          context-status: 'Failed: Deploy to hosting'
