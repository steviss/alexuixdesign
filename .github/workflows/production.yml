name: Deploy Production
#'on':
#  push:
#    branches: ['production']
'on':
  workflow_dispatch:

jobs:
  deploy:
    environment: production
    name: Deploying to LionDev Cloud
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: ðŸ’¬ Initial Slack Message
        id: slack-initial
        uses: ./.github/actions/slack/notification-initial
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN}}
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID}}
          deploy-url: ${{ vars.DEPLOY_URL }}

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version-file: 'package.json'

      - name: Yarn FontAwesome Setup
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}
        run: |
          yarn config set initScope npmScopes
          yarn config set npmScopes.fortawesome.npmRegistryServer "https://npm.fontawesome.com"
          yarn config set npmScopes.fortawesome.npmAlwaysAuth true
          yarn config set npmScopes.fortawesome.npmAuthToken $FONTAWESOME_NPM_AUTH_TOKEN

      - name: Install Yarn
        uses: ./.github/actions/yarn/install
        with:
          cwd: '.'
          enable-corepack: false
          cache-node-modules: true
          cache-install-state: true

      - name: Create .env file for frontend
        uses: SpicyPizza/create-envfile@v2.0.2
        with:
          envkey_SANITY_STUDIO_PROJECT_ID: ${{ secrets.SANITY_STUDIO_PROJECT_ID }}
          envkey_SANITY_STUDIO_DATASET: ${{ secrets.SANITY_STUDIO_DATASET }}
          envkey_ASTRO_WEBSITE_URL: ${{ vars.DEPLOY_URL }}
          file_name: .env

      - name: Run Env Variables Check
        shell: bash
        run: |
          yarn env:check

      - name: Build for deploy
        shell: bash
        run: yarn build

      - name: Deploy to LionDev Cloud
        id: deploy-to-plesk
        uses: ./.github/actions/deploy/deploy-to-plesk
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          passphrase: ${{ secrets.DEPLOY_SSH_PASSPHRASE }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
          source: 'dist/**,.env'
          deploy-path: ${{ vars.DEPLOY_PATH }}

      - name: ðŸ’¬ Update Slack Message - Success
        if: steps.deploy-to-plesk.outcome == 'success'
        uses: ./.github/actions/slack/notification-success
        with:
          initial-message: ${{ steps.slack-initial.outputs.ts }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          deploy-url: ${{ vars.DEPLOY_URL }}

      - name: ðŸ’¬ Update Slack Message - Failed
        if: failure()
        uses: ./.github/actions/slack/notification-failed
        with:
          initial-message: ${{ steps.slack-initial.outputs.ts }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          deploy-url: ${{ vars.DEPLOY_URL }}
